package cast

import (
	"net"
	"testing"
	"time"

	. "github.com/smartystreets/goconvey/convey"
)

func TestTo(t *testing.T) {
	Convey("TestTo", t, func() {
		So(ToBool("true"), ShouldBeTrue)
		So(ToInt("1"), ShouldEqual, 1)
		So(ToInt8("2"), ShouldEqual, 2)
		So(ToInt16("3"), ShouldEqual, 3)
		So(ToInt32("4"), ShouldEqual, 4)
		So(ToInt64("5"), ShouldEqual, 5)
		So(ToUint("6"), ShouldEqual, 6)
		So(ToUint8("7"), ShouldEqual, 7)
		So(ToUint16("8"), ShouldEqual, 8)
		So(ToUint32("9"), ShouldEqual, 9)
		So(ToUint64("10"), ShouldEqual, 10)
		So(ToFloat32("3.2"), ShouldEqual, 3.2)
		So(ToFloat64("6.4"), ShouldEqual, 6.4)
		So(ToDuration("5s"), ShouldEqual, 5*time.Second)
		So(ToIP("192.168.0.1"), ShouldEqual, net.ParseIP("192.168.0.1"))
		So(ToTime("2020-11-11 16:58:55"), ShouldEqual, time.Unix(1605113935, 0))
		So(ToString(123), ShouldEqual, "123")

		So(ToBool("x"), ShouldBeFalse)
		So(ToInt("x"), ShouldEqual, 0)
		So(ToInt8("x"), ShouldEqual, 0)
		So(ToInt16("x"), ShouldEqual, 0)
		So(ToInt32("x"), ShouldEqual, 0)
		So(ToInt64("x"), ShouldEqual, 0)
		So(ToUint("x"), ShouldEqual, 0)
		So(ToUint8("x"), ShouldEqual, 0)
		So(ToUint16("x"), ShouldEqual, 0)
		So(ToUint32("x"), ShouldEqual, 0)
		So(ToUint64("x"), ShouldEqual, 0)
		So(ToFloat32("x"), ShouldEqual, 0.0)
		So(ToFloat64("x"), ShouldEqual, 0.0)
		So(ToDuration("x"), ShouldEqual, time.Duration(0))
		So(ToIP("x"), ShouldEqual, net.IP{})
		So(ToTime("x"), ShouldEqual, time.Time{})
	})
}

func TestToP(t *testing.T) {
	Convey("TestTo", t, func() {
		So(ToBoolP("true"), ShouldBeTrue)
		So(ToIntP("1"), ShouldEqual, 1)
		So(ToInt8P("2"), ShouldEqual, 2)
		So(ToInt16P("3"), ShouldEqual, 3)
		So(ToInt32P("4"), ShouldEqual, 4)
		So(ToInt64P("5"), ShouldEqual, 5)
		So(ToUintP("6"), ShouldEqual, 6)
		So(ToUint8P("7"), ShouldEqual, 7)
		So(ToUint16P("8"), ShouldEqual, 8)
		So(ToUint32P("9"), ShouldEqual, 9)
		So(ToUint64P("10"), ShouldEqual, 10)
		So(ToFloat32P("3.2"), ShouldEqual, 3.2)
		So(ToFloat64P("6.4"), ShouldEqual, 6.4)
		So(ToDurationP("5s"), ShouldEqual, 5*time.Second)
		So(ToIPP("192.168.0.1"), ShouldEqual, net.ParseIP("192.168.0.1"))
		So(ToTimeP("2020-11-11 16:58:55"), ShouldEqual, time.Unix(1605113935, 0))
		So(ToStringP(123), ShouldEqual, "123")

		So(func() { ToBoolP("x") }, ShouldPanic)
		So(func() { ToIntP("x") }, ShouldPanic)
		So(func() { ToInt8P("x") }, ShouldPanic)
		So(func() { ToInt16P("x") }, ShouldPanic)
		So(func() { ToInt32P("x") }, ShouldPanic)
		So(func() { ToInt64P("x") }, ShouldPanic)
		So(func() { ToUintP("x") }, ShouldPanic)
		So(func() { ToUint8P("x") }, ShouldPanic)
		So(func() { ToUint16P("x") }, ShouldPanic)
		So(func() { ToUint32P("x") }, ShouldPanic)
		So(func() { ToUint64P("x") }, ShouldPanic)
		So(func() { ToFloat32P("x") }, ShouldPanic)
		So(func() { ToFloat64P("x") }, ShouldPanic)
		So(func() { ToDurationP("x") }, ShouldPanic)
		So(func() { ToIPP("x") }, ShouldPanic)
		So(func() { ToTimeP("x") }, ShouldPanic)
	})
}

func TestToD(t *testing.T) {
	Convey("TestTo", t, func() {
		So(ToBoolD("true", false), ShouldBeTrue)
		So(ToIntD("1", 11), ShouldEqual, 1)
		So(ToInt8D("2", 22), ShouldEqual, 2)
		So(ToInt16D("3", 33), ShouldEqual, 3)
		So(ToInt32D("4", 44), ShouldEqual, 4)
		So(ToInt64D("5", 55), ShouldEqual, 5)
		So(ToUintD("6", 66), ShouldEqual, 6)
		So(ToUint8D("7", 77), ShouldEqual, 7)
		So(ToUint16D("8", 88), ShouldEqual, 8)
		So(ToUint32D("9", 99), ShouldEqual, 9)
		So(ToUint64D("10", 1010), ShouldEqual, 10)
		So(ToFloat32D("3.2", 32.32), ShouldEqual, 3.2)
		So(ToFloat64D("6.4", 64.64), ShouldEqual, 6.4)
		So(ToDurationD("5s", 10*time.Second), ShouldEqual, 5*time.Second)
		So(ToIPD("192.168.0.1", net.ParseIP("192.168.0.2")), ShouldEqual, net.ParseIP("192.168.0.1"))
		So(ToTimeD("2020-11-11 16:58:55", time.Unix(1605116430, 0)), ShouldEqual, time.Unix(1605113935, 0))
		So(ToStringD(123, "456"), ShouldEqual, "123")

		So(ToBoolD("x", false), ShouldBeFalse)
		So(ToIntD("x", 11), ShouldEqual, 11)
		So(ToInt8D("x", 22), ShouldEqual, 22)
		So(ToInt16D("x", 33), ShouldEqual, 33)
		So(ToInt32D("x", 44), ShouldEqual, 44)
		So(ToInt64D("x", 55), ShouldEqual, 55)
		So(ToUintD("x", 66), ShouldEqual, 66)
		So(ToUint8D("x", 77), ShouldEqual, 77)
		So(ToUint16D("x", 88), ShouldEqual, 88)
		So(ToUint32D("x", 99), ShouldEqual, 99)
		So(ToUint64D("x", 1010), ShouldEqual, 1010)
		So(ToFloat32D("x", 32.32), ShouldEqual, 32.32)
		So(ToFloat64D("x", 64.64), ShouldEqual, 64.64)
		So(ToDurationD("x", 10*time.Second), ShouldEqual, 10*time.Second)
		So(ToIPD("x", net.ParseIP("192.168.0.2")), ShouldEqual, net.ParseIP("192.168.0.2"))
		So(ToTimeD("x", time.Unix(1605116430, 0)), ShouldEqual, time.Unix(1605116430, 0))
	})
}

func TestToSlice(t *testing.T) {
	Convey("TestToSlice", t, func() {
		So(ToBoolSlice("true,1,false"), ShouldResemble, []bool{true, true, false})
		So(ToIntSlice("1,2,3"), ShouldResemble, []int{1, 2, 3})
		So(ToInt8Slice("1,2,3"), ShouldResemble, []int8{1, 2, 3})
		So(ToInt16Slice("1,2,3"), ShouldResemble, []int16{1, 2, 3})
		So(ToInt32Slice("1,2,3"), ShouldResemble, []int32{1, 2, 3})
		So(ToInt64Slice("1,2,3"), ShouldResemble, []int64{1, 2, 3})
		So(ToUintSlice("1,2,3"), ShouldResemble, []uint{1, 2, 3})
		So(ToUint8Slice("1,2,3"), ShouldResemble, []uint8{1, 2, 3})
		So(ToUint16Slice("1,2,3"), ShouldResemble, []uint16{1, 2, 3})
		So(ToUint32Slice("1,2,3"), ShouldResemble, []uint32{1, 2, 3})
		So(ToUint64Slice("1,2,3"), ShouldResemble, []uint64{1, 2, 3})
		So(ToDurationSlice("1s,2s,3s"), ShouldResemble, []time.Duration{time.Second, 2 * time.Second, 3 * time.Second})
		So(ToTimeSlice("1970-01-01 08:00:01 +0800 CST,1970-01-01T08:00:02+08:00,1970-01-01T08:00:03+08:00"), ShouldResemble, []time.Time{time.Unix(1, 0), time.Unix(2, 0), time.Unix(3, 0)})
		So(ToIPSlice("192.168.0.1,192.168.0.2"), ShouldResemble, []net.IP{net.ParseIP("192.168.0.1"), net.ParseIP("192.168.0.2")})
		So(ToStringSlice("1,2,3"), ShouldResemble, []string{"1", "2", "3"})

		So(ToBoolSlice("x"), ShouldBeEmpty)
		So(ToIntSlice("x"), ShouldBeEmpty)
		So(ToInt8Slice("x"), ShouldBeEmpty)
		So(ToInt16Slice("x"), ShouldBeEmpty)
		So(ToInt32Slice("x"), ShouldBeEmpty)
		So(ToInt64Slice("x"), ShouldBeEmpty)
		So(ToUintSlice("x"), ShouldBeEmpty)
		So(ToUint8Slice("x"), ShouldBeEmpty)
		So(ToUint16Slice("x"), ShouldBeEmpty)
		So(ToUint32Slice("x"), ShouldBeEmpty)
		So(ToUint64Slice("x"), ShouldBeEmpty)
		So(ToDurationSlice("x"), ShouldBeEmpty)
		So(ToTimeSlice("x"), ShouldBeEmpty)
		So(ToIPSlice("x"), ShouldBeEmpty)
	})
}

func TestToSliceP(t *testing.T) {
	Convey("TestToSliceP", t, func() {
		So(ToBoolSliceP("true,1,false"), ShouldResemble, []bool{true, true, false})
		So(ToIntSliceP("1,2,3"), ShouldResemble, []int{1, 2, 3})
		So(ToInt8SliceP("1,2,3"), ShouldResemble, []int8{1, 2, 3})
		So(ToInt16SliceP("1,2,3"), ShouldResemble, []int16{1, 2, 3})
		So(ToInt32SliceP("1,2,3"), ShouldResemble, []int32{1, 2, 3})
		So(ToInt64SliceP("1,2,3"), ShouldResemble, []int64{1, 2, 3})
		So(ToUintSliceP("1,2,3"), ShouldResemble, []uint{1, 2, 3})
		So(ToUint8SliceP("1,2,3"), ShouldResemble, []uint8{1, 2, 3})
		So(ToUint16SliceP("1,2,3"), ShouldResemble, []uint16{1, 2, 3})
		So(ToUint32SliceP("1,2,3"), ShouldResemble, []uint32{1, 2, 3})
		So(ToUint64SliceP("1,2,3"), ShouldResemble, []uint64{1, 2, 3})
		So(ToDurationSliceP("1s,2s,3s"), ShouldResemble, []time.Duration{time.Second, 2 * time.Second, 3 * time.Second})
		So(ToTimeSliceP("1970-01-01 08:00:01 +0800 CST,1970-01-01T08:00:02+08:00,1970-01-01T08:00:03+08:00"), ShouldResemble, []time.Time{time.Unix(1, 0), time.Unix(2, 0), time.Unix(3, 0)})
		So(ToIPSliceP("192.168.0.1,192.168.0.2"), ShouldResemble, []net.IP{net.ParseIP("192.168.0.1"), net.ParseIP("192.168.0.2")})
		So(ToStringSliceP("1,2,3"), ShouldResemble, []string{"1", "2", "3"})

		So(func() { ToBoolSliceP("x") }, ShouldPanic)
		So(func() { ToIntSliceP("x") }, ShouldPanic)
		So(func() { ToInt8SliceP("x") }, ShouldPanic)
		So(func() { ToInt16SliceP("x") }, ShouldPanic)
		So(func() { ToInt32SliceP("x") }, ShouldPanic)
		So(func() { ToInt64SliceP("x") }, ShouldPanic)
		So(func() { ToUintSliceP("x") }, ShouldPanic)
		So(func() { ToUint8SliceP("x") }, ShouldPanic)
		So(func() { ToUint16SliceP("x") }, ShouldPanic)
		So(func() { ToUint32SliceP("x") }, ShouldPanic)
		So(func() { ToUint64SliceP("x") }, ShouldPanic)
		So(func() { ToDurationSliceP("x") }, ShouldPanic)
		So(func() { ToTimeSliceP("x") }, ShouldPanic)
		So(func() { ToIPSliceP("x") }, ShouldPanic)
	})
}

func TestToSliceD(t *testing.T) {
	Convey("TestToSliceD", t, func() {
		So(ToBoolSliceD("true,1,false", []bool{false, true}), ShouldResemble, []bool{true, true, false})
		So(ToIntSliceD("1,2,3", []int{4, 5, 6}), ShouldResemble, []int{1, 2, 3})
		So(ToInt8SliceD("1,2,3", []int8{4, 5, 6}), ShouldResemble, []int8{1, 2, 3})
		So(ToInt16SliceD("1,2,3", []int16{4, 5, 6}), ShouldResemble, []int16{1, 2, 3})
		So(ToInt32SliceD("1,2,3", []int32{4, 5, 6}), ShouldResemble, []int32{1, 2, 3})
		So(ToInt64SliceD("1,2,3", []int64{4, 5, 6}), ShouldResemble, []int64{1, 2, 3})
		So(ToUintSliceD("1,2,3", []uint{4, 5, 6}), ShouldResemble, []uint{1, 2, 3})
		So(ToUint8SliceD("1,2,3", []uint8{4, 5, 6}), ShouldResemble, []uint8{1, 2, 3})
		So(ToUint16SliceD("1,2,3", []uint16{4, 5, 6}), ShouldResemble, []uint16{1, 2, 3})
		So(ToUint32SliceD("1,2,3", []uint32{4, 5, 6}), ShouldResemble, []uint32{1, 2, 3})
		So(ToUint64SliceD("1,2,3", []uint64{4, 5, 6}), ShouldResemble, []uint64{1, 2, 3})
		So(ToDurationSliceD("1s,2s,3s", []time.Duration{4 * time.Second, 5 * time.Second, 6 * time.Second}), ShouldResemble, []time.Duration{time.Second, 2 * time.Second, 3 * time.Second})
		So(ToTimeSliceD("1970-01-01 08:00:01 +0800 CST,1970-01-01T08:00:02+08:00,1970-01-01T08:00:03+08:00", []time.Time{time.Unix(4, 0)}), ShouldResemble, []time.Time{time.Unix(1, 0), time.Unix(2, 0), time.Unix(3, 0)})
		So(ToIPSliceD("192.168.0.1,192.168.0.2", []net.IP{net.ParseIP("192.168.0.3")}), ShouldResemble, []net.IP{net.ParseIP("192.168.0.1"), net.ParseIP("192.168.0.2")})
		So(ToStringSliceD("1,2,3", []string{"4", "5", "6"}), ShouldResemble, []string{"1", "2", "3"})

		So(ToBoolSliceD("x", []bool{false, true}), ShouldResemble, []bool{false, true})
		So(ToIntSliceD("x", []int{4, 5, 6}), ShouldResemble, []int{4, 5, 6})
		So(ToInt8SliceD("x", []int8{4, 5, 6}), ShouldResemble, []int8{4, 5, 6})
		So(ToInt16SliceD("x", []int16{4, 5, 6}), ShouldResemble, []int16{4, 5, 6})
		So(ToInt32SliceD("x", []int32{4, 5, 6}), ShouldResemble, []int32{4, 5, 6})
		So(ToInt64SliceD("x", []int64{4, 5, 6}), ShouldResemble, []int64{4, 5, 6})
		So(ToUintSliceD("x", []uint{4, 5, 6}), ShouldResemble, []uint{4, 5, 6})
		So(ToUint8SliceD("x", []uint8{4, 5, 6}), ShouldResemble, []uint8{4, 5, 6})
		So(ToUint16SliceD("x", []uint16{4, 5, 6}), ShouldResemble, []uint16{4, 5, 6})
		So(ToUint32SliceD("x", []uint32{4, 5, 6}), ShouldResemble, []uint32{4, 5, 6})
		So(ToUint64SliceD("x", []uint64{4, 5, 6}), ShouldResemble, []uint64{4, 5, 6})
		So(ToDurationSliceD("x", []time.Duration{4 * time.Second, 5 * time.Second, 6 * time.Second}), ShouldResemble, []time.Duration{4 * time.Second, 5 * time.Second, 6 * time.Second})
		So(ToTimeSliceD("x", []time.Time{time.Unix(4, 0)}), ShouldResemble, []time.Time{time.Unix(4, 0)})
		So(ToIPSliceD("x", []net.IP{net.ParseIP("192.168.0.3")}), ShouldResemble, []net.IP{net.ParseIP("192.168.0.3")})
	})
}
