package cast

import (
	"net"
	"testing"
	"time"

	. "github.com/smartystreets/goconvey/convey"
)

func TestTo(t *testing.T) {
	Convey("TestTo", t, func() {
		So(ToBool("true"), ShouldBeTrue)
		So(ToInt("1"), ShouldEqual, 1)
		So(ToInt8("2"), ShouldEqual, 2)
		So(ToInt16("3"), ShouldEqual, 3)
		So(ToInt32("4"), ShouldEqual, 4)
		So(ToInt64("5"), ShouldEqual, 5)
		So(ToUint("6"), ShouldEqual, 6)
		So(ToUint8("7"), ShouldEqual, 7)
		So(ToUint16("8"), ShouldEqual, 8)
		So(ToUint32("9"), ShouldEqual, 9)
		So(ToUint32("10"), ShouldEqual, 10)
		So(ToFloat32("3.2"), ShouldEqual, 3.2)
		So(ToFloat64("6.4"), ShouldEqual, 6.4)
		So(ToDuration("5s"), ShouldEqual, 5*time.Second)
		So(ToIP("192.168.0.1"), ShouldEqual, net.ParseIP("192.168.0.1"))
		So(ToTime("2020-11-11 16:58:55"), ShouldEqual, time.Unix(1605113935, 0))
		So(ToString(123), ShouldEqual, "123")

		So(ToBool("x"), ShouldBeFalse)
		So(ToInt("x"), ShouldEqual, 0)
		So(ToInt8("x"), ShouldEqual, 0)
		So(ToInt16("x"), ShouldEqual, 0)
		So(ToInt32("x"), ShouldEqual, 0)
		So(ToInt64("x"), ShouldEqual, 0)
		So(ToUint("x"), ShouldEqual, 0)
		So(ToUint8("x"), ShouldEqual, 0)
		So(ToUint16("x"), ShouldEqual, 0)
		So(ToUint32("x"), ShouldEqual, 0)
		So(ToUint32("x"), ShouldEqual, 0)
		So(ToFloat32("x"), ShouldEqual, 0.0)
		So(ToFloat64("x"), ShouldEqual, 0.0)
		So(ToDuration("x"), ShouldEqual, time.Duration(0))
		So(ToIP("x"), ShouldEqual, net.IP{})
		So(ToTime("x"), ShouldEqual, time.Time{})
	})
}

func TestToP(t *testing.T) {
	Convey("TestTo", t, func() {
		So(ToBoolP("true"), ShouldBeTrue)
		So(ToIntP("1"), ShouldEqual, 1)
		So(ToInt8P("2"), ShouldEqual, 2)
		So(ToInt16P("3"), ShouldEqual, 3)
		So(ToInt32P("4"), ShouldEqual, 4)
		So(ToInt64P("5"), ShouldEqual, 5)
		So(ToUintP("6"), ShouldEqual, 6)
		So(ToUint8P("7"), ShouldEqual, 7)
		So(ToUint16P("8"), ShouldEqual, 8)
		So(ToUint32P("9"), ShouldEqual, 9)
		So(ToUint32P("10"), ShouldEqual, 10)
		So(ToFloat32P("3.2"), ShouldEqual, 3.2)
		So(ToFloat64P("6.4"), ShouldEqual, 6.4)
		So(ToDurationP("5s"), ShouldEqual, 5*time.Second)
		So(ToIPP("192.168.0.1"), ShouldEqual, net.ParseIP("192.168.0.1"))
		So(ToTimeP("2020-11-11 16:58:55"), ShouldEqual, time.Unix(1605113935, 0))
		So(ToStringP(123), ShouldEqual, "123")

		So(func() { ToBoolP("x") }, ShouldPanic)
		So(func() { ToIntP("x") }, ShouldPanic)
		So(func() { ToInt8P("x") }, ShouldPanic)
		So(func() { ToInt16P("x") }, ShouldPanic)
		So(func() { ToInt32P("x") }, ShouldPanic)
		So(func() { ToInt64P("x") }, ShouldPanic)
		So(func() { ToUintP("x") }, ShouldPanic)
		So(func() { ToUint8P("x") }, ShouldPanic)
		So(func() { ToUint16P("x") }, ShouldPanic)
		So(func() { ToUint32P("x") }, ShouldPanic)
		So(func() { ToUint32P("x") }, ShouldPanic)
		So(func() { ToFloat32P("x") }, ShouldPanic)
		So(func() { ToFloat64P("x") }, ShouldPanic)
		So(func() { ToDurationP("x") }, ShouldPanic)
		So(func() { ToIPP("x") }, ShouldPanic)
		So(func() { ToTimeP("x") }, ShouldPanic)
	})
}

func TestToD(t *testing.T) {
	Convey("TestTo", t, func() {
		So(ToBoolD("true", false), ShouldBeTrue)
		So(ToIntD("1", 11), ShouldEqual, 1)
		So(ToInt8D("2", 22), ShouldEqual, 2)
		So(ToInt16D("3", 33), ShouldEqual, 3)
		So(ToInt32D("4", 44), ShouldEqual, 4)
		So(ToInt64D("5", 55), ShouldEqual, 5)
		So(ToUintD("6", 66), ShouldEqual, 6)
		So(ToUint8D("7", 77), ShouldEqual, 7)
		So(ToUint16D("8", 88), ShouldEqual, 8)
		So(ToUint32D("9", 99), ShouldEqual, 9)
		So(ToUint32D("10", 1010), ShouldEqual, 10)
		So(ToFloat32D("3.2", 32.32), ShouldEqual, 3.2)
		So(ToFloat64D("6.4", 64.64), ShouldEqual, 6.4)
		So(ToDurationD("5s", 10*time.Second), ShouldEqual, 5*time.Second)
		So(ToIPD("192.168.0.1", net.ParseIP("192.168.0.2")), ShouldEqual, net.ParseIP("192.168.0.1"))
		So(ToTimeD("2020-11-11 16:58:55", time.Unix(1605116430, 0)), ShouldEqual, time.Unix(1605113935, 0))
		So(ToStringD(123, "456"), ShouldEqual, "123")

		So(ToBoolD("x", false), ShouldBeFalse)
		So(ToIntD("x", 11), ShouldEqual, 11)
		So(ToInt8D("x", 22), ShouldEqual, 22)
		So(ToInt16D("x", 33), ShouldEqual, 33)
		So(ToInt32D("x", 44), ShouldEqual, 44)
		So(ToInt64D("x", 55), ShouldEqual, 55)
		So(ToUintD("x", 66), ShouldEqual, 66)
		So(ToUint8D("x", 77), ShouldEqual, 77)
		So(ToUint16D("x", 88), ShouldEqual, 88)
		So(ToUint32D("x", 99), ShouldEqual, 99)
		So(ToUint32D("x", 1010), ShouldEqual, 1010)
		So(ToFloat32D("x", 32.32), ShouldEqual, 32.32)
		So(ToFloat64D("x", 64.64), ShouldEqual, 64.64)
		So(ToDurationD("x", 10*time.Second), ShouldEqual, 10*time.Second)
		So(ToIPD("x", net.ParseIP("192.168.0.2")), ShouldEqual, net.ParseIP("192.168.0.2"))
		So(ToTimeD("x", time.Unix(1605116430, 0)), ShouldEqual, time.Unix(1605116430, 0))
	})
}
